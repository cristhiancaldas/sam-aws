openapi: "3.0.1"
info:
  title: ${AppName}-api
  version: "1.0.0"
paths:
  /user:
    post:
      tags: ["User API"]
      description: Create User
      operationId: "getUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDraftCustomersRequest'
      responses:
        "400":
          description: "400 response"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDraftCustomersResponse'
      security:
        - lambda-authorizer: []
      x-amazon-apigateway-request-validator: "params-only"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        credentials:
          Fn::GetAtt: [ AWSLambdaBasicExecutionRole, Arn ]
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RestFunction.Arn}/invocations
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
    get:
      tags: ["Draft Customers API"]
      description: Find Customer Drafts
      operationId: "getDraftCustomer"
      parameters:
        - in: query
          name: supplierId
          schema:
            type: string
          description: The supplierId to filter by
          required: true
        - in: query
          name: customerCode
          schema:
            type: string
          description: The customerCode to filter by
        - in: query
          name: customerName
          schema:
            type: string
          description: The customerName to filter by
        - in: query
          name: phoneNumber
          schema:
            type: string
          description: The phoneNumber to filter by
        - in: query
          name: pageSize
          schema:
            type: integer
          description: The numbers of items to return if paging
        - in: query
          name: customerCodeStartKey
          schema:
            type: string
          description: The customerCode start value if paging by any kind of filter
        - in: query
          name: customerNameStartKey
          schema:
            type: string
          description: The customerName start value if paging by customerName
        - in: query
          name: phoneNumberStartKey
          schema:
            type: string
          description: The phoneNumber start value if paging by phoneNumber

      responses:
        "400":
          description: "400 response"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DraftCustomersResponse'
      security:
        - lambda-authorizer: []
      x-amazon-apigateway-request-validator: "params-only"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        credentials:
          Fn::GetAtt: [ AWSLambdaBasicExecutionRole, Arn ]
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RestFunction.Arn}/invocations
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000

components:
  schemas:
    CreateDraftCustomersRequest:
      type: object
      properties:
        draftCustomers:
          type: array
          items:
            $ref: '#/components/schemas/CreateDraftCustomerRequest'
      required:
        - draftCustomers
    CreateDraftCustomerRequest:
      type: object
      properties:
        supplierId:
          type: string
        customerCode:
          type: string
        customerName:
          type: string
        salesRep:
          type: string
        countryCode:
          type: string
        legalId:
          type: string
        customerType:
          type: string
        state:
          type: string
        billingAddress:
          type: string
        postalCode:
          type: string
        additionalInfo:
          type: string
        latitude:
          type: string
        longitude:
          type: string
        responsibleName:
          type: string
        responsibleLastName:
          type: string
        email:
          type: string
          format: email
        landline:
          type: string
        phoneNumber:
          type: string
      required:
        - supplierId
        - customerCode
        - customerName
    CreateDraftCustomersResponse:
      type: object
      properties:
        draftCustomers:
          type: array
          items:
            $ref: '#/components/schemas/CreateDraftCustomerResponse'
      required:
        - draftCustomers
    CreateDraftCustomerResponse:
      type: object
      properties:
        success:
          type: boolean
        reason:
          type: string
        draftCustomer:
          $ref: '#/components/schemas/DraftCustomerResponse'
      required:
        - status
        - draftCustomer
    DraftCustomerResponse:
      type: object
      properties:
        supplierId:
          type: string
        customerCode:
          type: string
        customerName:
          type: string
        salesRep:
          type: string
        countryCode:
          type: string
        legalId:
          type: string
        customerType:
          type: string
        state:
          type: string
        billingAddress:
          type: string
        postalCode:
          type: string
        additionalInfo:
          type: string
        latitude:
          type: string
        longitude:
          type: string
        responsibleName:
          type: string
        responsibleLastName:
          type: string
        email:
          type: string
          format: email
        landline:
          type: string
        phoneNumber:
          type: string
        creationDate:
          type: string
          format: date-time
          example: "2022-07-04T07:24:27.5309Z"
      required:
        - supplierId
        - customerCode
        - customerName
    DraftCustomersResponse:
      type: object
      properties:
        customerCodeLastKey:
          type: string
        customerNameLastKey:
          type: string
        draftCustomers:
          type: array
          items:
            $ref: '#/components/schemas/DraftCustomerResponse'
      required:
        - pageSize
        - draftCustomers

x-amazon-apigateway-request-validators:
  params-only:
    validateRequestParameters: true
    validateRequestBody: false

